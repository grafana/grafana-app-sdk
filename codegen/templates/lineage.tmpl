//
// Code generated by grafana-app-sdk. DO NOT EDIT.
//

package {{.Package}}

import (
	"embed"
	"encoding/json"

	"cuelang.org/go/cue"
	"cuelang.org/go/cue/cuecontext"
	"github.com/grafana/thema"
	"github.com/grafana/thema/load"
	"github.com/grafana/thema/vmux"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
    "k8s.io/apimachinery/pkg/types"
)

var rt = thema.NewRuntime(cuecontext.New())
var lineage thema.Lineage
var typedLatest thema.TypedSchema[*LineageType]
var muxer vmux.TypedMux[*LineageType]

// LacunaResolver is used by Object.Unmarshal to resolve any lacunas that emerge in the unmarshal process.
// It is skipped if nil, and should be overridden in non-generated code for custom lacuna resolution.
var LacunaResolver func(*LineageType, []thema.Lacuna) error = nil

// LineageType must be used instead of Object for thema.BindType, as the bound struct must exactly match the Schema,
// and Object has extra fields for metadata (which necessarily cannot be rendered in the Lineage/Schema,
// but must exist for the Object). This is essentially an "intermediate step" struct.
type LineageType struct { {{ range .Subresources }}
    {{.TypeName}} {{.TypeName}} `json:"{{.JSONName}}"`{{ end }}
}

func init() {
	var err error
	if lineage, err = Lineage(rt); err != nil {
		panic(err)
	}
	if typedLatest, err = thema.BindType(lineage.Latest(), &LineageType{}); err != nil {
		panic(err)
	}
	muxer = vmux.NewTypedMux[*LineageType](typedLatest, vmux.NewJSONCodec("input"))
}

//go:embed {{.CUEFile}} cue.mod/*
var modFS embed.FS

func loadLineage(lib *thema.Runtime) (cue.Value, error) {
	inst, err := load.InstanceWithThema(modFS, ".")
	if err != nil {
		return cue.Value{}, err
	}

	val := lib.Context().BuildInstance(inst)
	return val.LookupPath(cue.ParsePath("{{.CUESelector}}")), nil
}

// Lineage constructs a Go handle representing the {{.TypeName}} Object lineage,
// which includes the spec and all subresources.
func Lineage(rt *thema.Runtime, opts ...thema.BindOption) (thema.Lineage, error) {
	linval, err := loadLineage(rt)
	if err != nil {
		return nil, err
	}
	return thema.BindLineage(linval, rt, opts...)
}

var _ thema.LineageFactory = Lineage // Ensure our factory fulfills the type

type ThemaObjectBytes struct {
    Metadata []byte
    Spec []byte
    Subresources map[string][]byte
}

func ThemaUnmarshalFunc(into *{{.ObjectTypeName}}, objBytes ThemaObjectBytes) error {
    // Unify the spec and subresources into one JSON object for the muxer
    unified := make(map[string]json.RawMessage)
    unified["spec"] = objBytes.Spec
    {{ range .Subresources }}if sr, ok := objBytes.Subresources["{{.JSONName}}"]; ok {
        unified["{{.JSONName}}"] = sr
    }
    {{ end }}
    unified["metadata"] = objBytes.Metadata
    bytes, err := json.Marshal(unified)
    if err != nil {
        return err
    }

    // Parse with the muxer
	instance, lacunas, err := muxer(bytes)
	if err != nil {
		return err
	}
	parsedObj, err := instance.Value()
	if err != nil {
		return err
	}
	if lacunas != nil && len(lacunas.AsList()) > 0 && LacunaResolver != nil {
        err = LacunaResolver(parsedObj, lacunas.AsList())
        if err != nil {
            return err
        }
	}

	into.Spec = parsedObj.Spec{{ range .Subresources }}{{ if ne .TypeName "Metadata" }}
    into.{{.TypeName}} = parsedObj.{{.TypeName}}{{ end }}{{ end }}
    into.Spec = parsedObj.Spec
    into.Status = parsedObj.Status
    into.SetCreationTimestamp(metav1.NewTime(parsedObj.Metadata.CreationTimestamp))
    if parsedObj.Metadata.DeletionTimestamp != nil {
        dt := metav1.NewTime(*parsedObj.Metadata.DeletionTimestamp)
        into.SetDeletionTimestamp(&dt)
    }
    into.SetFinalizers(parsedObj.Metadata.Finalizers)
    into.SetGeneration(parsedObj.Metadata.Generation)
    into.SetLabels(parsedObj.Metadata.Labels)
    into.SetResourceVersion(parsedObj.Metadata.ResourceVersion)
    into.SetUID(types.UID(parsedObj.Metadata.Uid))
	return nil
}
