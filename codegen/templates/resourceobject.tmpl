//
// Code generated by grafana-app-sdk. DO NOT EDIT.
//

package {{.Package}}

import (
    "encoding/json"

    "github.com/grafana/grafana-app-sdk/resource"
    "github.com/grafana/thema"
)

// LacunaResolver is used by Object.Unmarshal to resolve any lacunas that emerge in the unmarshal process.
// It is skipped if nil, and should be overridden in non-generated code for custom lacuna resolution.
var LacunaResolver func(*LineageType, []thema.Lacuna) error = nil

// {{.ObjectTypeName}} is a resource.Object-implementing wrapper for {{.TypeName}}.
// It contains static and object metadata, as well as the {{.TypeName}} struct itself.
type {{.ObjectTypeName}} struct {
    // StaticMeta contains the static metadata (name, namespace, group, version, kind) that uniquely identifies this resource
    // it is distinct from the Metadata field, which contains all other metadata for the object.
    // StaticMeta should not be mutated on an existing object (as this will then cause it to indicate a new object instead).
    // TODO: this may end up merged with Metadata in the future
    StaticMeta resource.StaticMetadata `json:"staticMetadata"`
    // Metadata contains all the common and kind-specific metadata for the object.
    Metadata   Metadata `json:"metadata"`
    // Spec contains the spec contents for the object
    Spec       {{.SpecTypeName}} `json:"spec"`{{ range .Subresources }}{{ if ne .Comment "" }}
    // {{.Comment }}{{end}}
    {{ .TypeName }} {{.TypeName}} `json:"{{.JSONName}}"`{{ end }}
}

// CommonMetadata returns the resource.CommonMetadata associated with this {{.ObjectTypeName}}.
// The CommonMetadata can be overwritten with a SetCommonMetadata call,
// or individual parts changed directly from the Metadata field.
func ({{.ObjectShortName}} *{{.ObjectTypeName}}) CommonMetadata() resource.CommonMetadata {
    return resource.CommonMetadata{
        UID: {{.ObjectShortName}}.Metadata.Uid,
        ResourceVersion: {{.ObjectShortName}}.Metadata.ResourceVersion,
        Generation: {{.ObjectShortName}}.Metadata.Generation,
        Labels: {{.ObjectShortName}}.Metadata.Labels,
        CreationTimestamp: {{.ObjectShortName}}.Metadata.CreationTimestamp,
        UpdateTimestamp: {{.ObjectShortName}}.Metadata.UpdateTimestamp,
        DeletionTimestamp: {{.ObjectShortName}}.Metadata.DeletionTimestamp,
        CreatedBy: {{.ObjectShortName}}.Metadata.CreatedBy,
        UpdatedBy: {{.ObjectShortName}}.Metadata.UpdatedBy,
        Finalizers: {{.ObjectShortName}}.Metadata.Finalizers,
        ExtraFields: {{.ObjectShortName}}.Metadata.ExtraFields,
    }
}

// SetCommonMetadata overwrites the resource.CommonMetadata associated with this {{.ObjectTypeName}}
// with the provided CommonMetadata.
// In practice, this overwrites the Metadata fields that correlate to the CommonMetadata fields with the new values provided.
func ({{.ObjectShortName}} *{{.ObjectTypeName}}) SetCommonMetadata(metadata resource.CommonMetadata) {
    {{.ObjectShortName}}.Metadata.Uid = metadata.UID
    {{.ObjectShortName}}.Metadata.ResourceVersion = metadata.ResourceVersion
    {{.ObjectShortName}}.Metadata.Generation = metadata.Generation
    {{.ObjectShortName}}.Metadata.Labels = metadata.Labels
    {{.ObjectShortName}}.Metadata.CreationTimestamp = metadata.CreationTimestamp
    {{.ObjectShortName}}.Metadata.UpdateTimestamp = metadata.UpdateTimestamp
    {{.ObjectShortName}}.Metadata.DeletionTimestamp = metadata.DeletionTimestamp
    {{.ObjectShortName}}.Metadata.CreatedBy = metadata.CreatedBy
    {{.ObjectShortName}}.Metadata.UpdatedBy = metadata.UpdatedBy
    {{.ObjectShortName}}.Metadata.Finalizers = metadata.Finalizers
    {{.ObjectShortName}}.Metadata.ExtraFields = metadata.ExtraFields
}

// StaticMetadata returns the resource.StaticMetadata associated with this {{.ObjectTypeName}}.
// The StaticMetadata can be overwritten with a SetStaticMetadata call,
// or individual parts changed directly from the StaticMeta field.
func ({{.ObjectShortName}} *{{.ObjectTypeName}}) StaticMetadata() resource.StaticMetadata {
    return {{.ObjectShortName}}.StaticMeta
}

// SetStaticMetadata overwrites the resource.StaticMetadata associated with this {{.ObjectTypeName}}
// with the provided StaticMetadata.
func ({{.ObjectShortName}} *{{.ObjectTypeName}}) SetStaticMetadata(metadata resource.StaticMetadata) {
    {{.ObjectShortName}}.StaticMeta = metadata
}

func ({{.ObjectShortName}} *{{.ObjectTypeName}}) CustomMetadata() resource.CustomMetadata { {{$sn := .ObjectShortName}}
    return resource.SimpleCustomMetadata{
        {{range .CustomMetadataFields}}"{{.JSONName}}": {{$sn}}.Metadata.{{.FieldName}},
        {{end}} }
}

// SpecObject returns the actual "schema" {{.TypeName}} object, which holds the main body of data.
func ({{.ObjectShortName}} *{{.ObjectTypeName}}) SpecObject() any {
    return {{.ObjectShortName}}.Spec
}
{{$shortName := .ObjectShortName}}
// Subresources returns a map of subresource name(s) to the object value for that subresource.
func ({{.ObjectShortName}} *{{.ObjectTypeName}}) Subresources() map[string]any {
    return map[string]any{ {{ range .Subresources }}
        "{{.JSONName}}": {{$shortName}}.{{.TypeName}},{{ end }}
    }
}

// Copy returns a full copy of the {{.ObjectTypeName}} with all its data
func ({{.ObjectShortName}} *{{.ObjectTypeName}}) Copy() resource.Object {
    return resource.CopyObject({{.ObjectShortName}})
}

// Unmarshal uses an internal bound Lineage to unmarshal the spec object and all provided subresources.
// After unmarshaling, they will be available via the SpecObject() and Subresources() calls.
// If the spec or any subresources cannot be unmarshaled, it will return an error.
func ({{.ObjectShortName}} *{{.ObjectTypeName}}) Unmarshal(objBytes resource.ObjectBytes, config resource.UnmarshalConfig) error {
    // Unify the spec and subresources into one JSON object for the muxer
    unified := make(map[string]json.RawMessage)
    unified["spec"] = objBytes.Spec
    {{ range .Subresources }}if sr, ok := objBytes.Subresources["{{.JSONName}}"]; ok {
        unified["{{.JSONName}}"] = sr
    }
    {{ end }}
    unified["metadata"] = objBytes.Metadata
    bytes, err := json.Marshal(unified)
    if err != nil {
        return err
    }

    // Parse with the muxer
	instance, lacunas, err := muxer(bytes)
	if err != nil {
		return err
	}
	parsedObj, err := instance.Value()
	if err != nil {
		return err
	}
	if lacunas != nil && len(lacunas.AsList()) > 0 && LacunaResolver != nil {
        err = LacunaResolver(parsedObj, lacunas.AsList())
        if err != nil {
            return err
        }
	}
	{{.ObjectShortName}}.Spec = parsedObj.Spec
	{{.ObjectShortName}}.Metadata = parsedObj.Metadata{{ range .Subresources }}
    {{$shortName}}.{{.TypeName}} = parsedObj.{{.TypeName}}{{ end }}
	return nil
}
