package {{.PackageName}}

import (
    "context"
    "errors"
    "fmt"
    "reflect"

	"github.com/grafana/grafana-app-sdk/app"
	"github.com/grafana/grafana-app-sdk/logging"
	"github.com/grafana/grafana-app-sdk/resource"
	"github.com/grafana/grafana-app-sdk/simple"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/klog/v2"

	{{ range $key, $val := .GVToKindAll }}{{ $.ToPackageNameVariable ($key.String) }} "{{$.Repo}}/{{$.APIsPath}}/{{ $.ToPackageName $key.Group }}/{{ $.ToPackageName $key.Version }}"
	{{end}}
	{{ if ne .WatcherPackage "" }}"{{$.Repo}}/pkg/{{.WatcherPackage}}"{{end}}
)

type {{.ProjectName | .ToUpper}}Config struct {
	EnableWatchers bool
}

func New(cfg app.Config) (app.App, error) {
    {{.ProjectName}}Config, ok := cfg.SpecificConfig.(*{{.ProjectName | .ToUpper}}Config)
    if !ok {
        return nil, errors.New("could not load project's specific config, type assertion failed: type of SpecificConfig=" + reflect.TypeOf(cfg.SpecificConfig).Name())
    }

    managedKinds := make([]simple.AppManagedKind, 0)
    {{ $pn := .ProjectName }}
    {{ $wp := .WatcherPackage }}

    {{ range $key, $val := .GVToKindCurrent }}{{ range $val }}
    {
        managedKind := simple.AppManagedKind{
            Kind: {{$.ToPackageNameVariable ($key.String)}}.{{.Kind}}Kind(),
            Mutator: &simple.Mutator{
                MutateFunc: func(ctx context.Context, req *app.AdmissionRequest) (*app.MutatingResponse, error) {
                   // modify req.Object if needed
                   return &app.MutatingResponse{
                           UpdatedObject: req.Object,
                   }, nil
               },
            },
            Validator: &simple.Validator{
               ValidateFunc: func(ctx context.Context, req *app.AdmissionRequest) error {
                   // do something here if needed
                   return nil
               },
            },
        }
        managedKinds = append(managedKinds, managedKind)
        if {{$pn}}Config.EnableWatchers {
            {{ $p := $wp }}{{.MachineName}}Watcher, err := {{if ne $p ""}}{{$p}}.{{end}}New{{.Kind}}Watcher()
            if err != nil {
                return nil, fmt.Errorf("unable to create {{.Kind}}Watcher: %w", err)
            }{{ if eq $key.Version .Current }}
            managedKind.Watcher = {{.MachineName}}Watcher{{ end }}
        }
        {{ end }}{{ end }}
    }

	config := simple.AppConfig{
		Name:           "{{.ProjectName}}",
		KubeConfig:     cfg.KubeConfig,
		InformerConfig: simple.AppInformerConfig{
		    ErrorHandler: func(ctx context.Context, err error) {
                // FIXME: add your own error handling here
                klog.ErrorS(err, "Informer processing error")
            },
		},
		ManagedKinds: managedKinds,
	}

    // Create the App
	a, err := simple.NewApp(config)
	if err != nil {
	    return nil, err
	}

	// Validate the capabilities against the provided manifest to make sure there isn't a mismatch
	err = a.ValidateManifest(cfg.ManifestData)
	 if err != nil {
        return nil, err
    }
	return a, nil
}

func GetKinds() map[schema.GroupVersion]resource.Kind {
    {{ range $key, $val := .GVToKindAll }}{{ range $val }}
    gv := schema.GroupVersion{
        Group:   {{ $.ToPackageNameVariable ($key.String) }}.{{.Kind}}Kind().Group(),
        Version: {{ $.ToPackageNameVariable ($key.String) }}.{{.Kind}}Kind().Version(),
    }
    return map[schema.GroupVersion]resource.Kind{
        gv: {{ $.ToPackageNameVariable ($key.String) }}.{{.Kind}}Kind(),
    }
    {{end}}{{ end }}
}
