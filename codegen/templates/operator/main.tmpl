package main

import (
    "log/slog"
    "os"
    "os/signal"
    "syscall"

	"github.com/grafana/grafana-app-sdk/logging"
	"github.com/grafana/grafana-app-sdk/operator"
	"github.com/grafana/grafana-app-sdk/k8s"

    {{$repo := .Repo}}{{$codegenPath := .CodegenPath}}{{ range .Resources }}
	"{{$repo}}/{{$codegenPath}}/resource/{{.MachineName}}"{{ end}}{{ if ne .WatcherPackage "" }}
	"{{$repo}}/pkg/{{.WatcherPackage}}"{{end}}
)

func main() {
    // Configure the default logger to use slog
    logging.DefaultLogger = logging.NewSLogLogger(slog.NewJSONHandler(os.Stdout, &slog.HandlerOptions{
		Level: slog.LevelDebug,
	}))

    //Load the config from the environment
    cfg, err := LoadConfigFromEnv()
	if err != nil {
        logging.DefaultLogger.With("error", err).Error("Unable to load config from environment")
		panic(err)
	}

    // Set up telemetry
    // Tracing
    err = SetTraceProvider(cfg.OTelConfig)
	if err != nil {
        logging.DefaultLogger.With("error", err).Error("Unable to set up tracing")
		panic(err)
	}

    // Load the kube config
    kubeConfig, err := LoadInClusterConfig()
    if err != nil {
        logging.DefaultLogger.With("error", err).Error("Unable to load kubernetes configuration")
		panic(err)
    }

    // Create our client generator, using kubernetes as a store
    clientGenerator := k8s.NewClientRegistry(kubeConfig.RestConfig, k8s.ClientConfig{})

    // Create the controller which we'll attach our informer(s) and watcher(s) to
    controller := operator.NewInformerController()

    // Wrap our resource watchers in OpinionatedWatchers, then add them to the controller
    {{ $p := .WatcherPackage }}{{ range .Resources }}{{.MachineName}}Client, err := clientGenerator.ClientFor({{.MachineName}}.Schema())
    if err != nil {
        logging.DefaultLogger.With("error", err).Error("Unable to generate client for {{.MachineName}}")
        panic(err)
    }
    {{.MachineName}}Watcher, err := {{if ne $p ""}}{{$p}}.{{end}}New{{.Name}}Watcher()
    if err != nil {
        logging.DefaultLogger.With("error", err).Error("Unable to create {{.Name}}Watcher")
        panic(err)
    }
    {{.MachineName}}OpinionatedWatcher, err := operator.NewOpinionatedWatcher({{.MachineName}}.Schema(), {{.MachineName}}Client)
    if err != nil {
        logging.DefaultLogger.With("error", err).Error("Unable to create OpinionatedWatcher for {{.Name}}")
        panic(err)
    }
    {{.MachineName}}OpinionatedWatcher.Wrap({{.MachineName}}Watcher, false)
    {{.MachineName}}OpinionatedWatcher.SyncFunc = {{.MachineName}}Watcher.Sync
    err = controller.AddWatcher({{.MachineName}}OpinionatedWatcher, {{.MachineName}}.Schema().Kind())
    if err != nil {
        logging.DefaultLogger.With("error", err).Error("Error adding {{.Name}} watcher to controller")
        panic(err)
    }
    {{ end }}

    // Add informers for each of our resource types
    {{ range .Resources }}{{.MachineName}}Informer, err := operator.NewKubernetesBasedInformer({{.MachineName}}.Schema(), {{.MachineName}}Client, kubeConfig.Namespace)
    if err != nil {
        logging.DefaultLogger.With("error", err).Error("Unable to create {{.Name}} informer")
        panic(err)
    }
    err = controller.AddInformer({{.MachineName}}Informer, {{.MachineName}}.Schema().Kind())
    if err != nil {
        logging.DefaultLogger.With("error", err).Error("Error adding {{.Name}} informer to controller")
        panic(err)
    }
    {{ end }}

    // Create our operator
    op := operator.New()
    op.AddController(controller)

    stopCh := make(chan struct{})

    // Signal channel
    sigCh := make(chan os.Signal, 1)
    signal.Notify(sigCh, syscall.SIGINT, syscall.SIGTERM)
    go func() {
        <- sigCh
        stopCh <- struct{}{}
    }()

    // Run
	logging.DefaultLogger.Info("Starting operator")
    err = op.Run(stopCh)
    if err != nil {
        logging.DefaultLogger.With("error", err).Error("Operator exited with error")
		panic(err)
	}
    logging.DefaultLogger.Info("Normal operator exit")

}