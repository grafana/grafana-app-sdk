package main

import (
    "context"
    "log/slog"
    "os"
    "os/signal"
    "syscall"

	"github.com/grafana/grafana-app-sdk/logging"
	"github.com/grafana/grafana-app-sdk/resource"
	"github.com/grafana/grafana-app-sdk/simple"

    {{ if .KindsAreGrouped }}{{ range $key, $val := .GVToKind }}{{ $.ToPackageNameVariable ($key.String) }} "{{$.Repo}}/{{$.CodegenPath}}/{{ $.ToPackageName $key.Group }}/{{ $.ToPackageName $key.Version }}"
	{{ end }}{{ else }}{{ range .Resources }}{{if ne .APIResource nil }}{{.MachineName}} "{{$.Repo}}/{{$.CodegenPath}}/resource/{{ $.ToPackageName .MachineName }}{{ if $.ResourcesAreVersioned }}/{{ $.ToPackageName .Current}}{{end}}"{{ end }}
    {{end}}{{end}}{{ if ne .WatcherPackage "" }}"{{$.Repo}}/pkg/{{.WatcherPackage}}"{{end}}
)

func main() {
    // Configure the default logger to use slog
    logging.DefaultLogger = logging.NewSLogLogger(slog.NewJSONHandler(os.Stdout, &slog.HandlerOptions{
		Level: slog.LevelDebug,
	}))

    //Load the config from the environment
    cfg, err := LoadConfigFromEnv()
	if err != nil {
        logging.DefaultLogger.With("error", err).Error("Unable to load config from environment")
		panic(err)
	}

    // Load the kube config
    kubeConfig, err := LoadInClusterConfig()
    if err != nil {
        logging.DefaultLogger.With("error", err).Error("Unable to load kubernetes configuration")
		panic(err)
    }

    runner, err := simple.NewOperator(simple.OperatorConfig{
		Name:       "{{.ProjectName}}-operator",
		KubeConfig: kubeConfig.RestConfig,
		Metrics: simple.MetricsConfig{
			Enabled: true,
		},
		Tracing: simple.TracingConfig{
			Enabled: true,
			OpenTelemetryConfig: simple.OpenTelemetryConfig{
				Host:        cfg.OTelConfig.Host,
				Port:        cfg.OTelConfig.Port,
				ConnType:    simple.OTelConnType(cfg.OTelConfig.ConnType),
				ServiceName: cfg.OTelConfig.ServiceName,
			},
		},
		ErrorHandler: func(ctx context.Context, err error) {
            // FIXME: add your own error handling here
			logging.FromContext(ctx).Error(err.Error())
		},
	})
    if err != nil {
        logging.DefaultLogger.With("error", err).Error("Error creating operator")
        panic(err)
    }

    // Wrap our resource watchers in OpinionatedWatchers, then add them to the controllera
    {{ $p := .WatcherPackage }}{{ range $key, $val := .GVToKind }}{{ range $val }}{{.MachineName}}Watcher, err := {{if ne $p ""}}{{$p}}.{{end}}New{{.Kind}}Watcher()
    if err != nil {
        logging.DefaultLogger.With("error", err).Error("Unable to create {{.Kind}}Watcher")
        panic(err)
    }
    err = runner.WatchKind({{if $.KindsAreGrouped }}{{$.ToPackageNameVariable ($key.String)}}.{{.Kind}}Kind(){{else}}{{ $.ToPackageName .MachineName }}.Kind(){{end}}, {{.MachineName}}Watcher, simple.ListWatchOptions{
        Namespace: resource.NamespaceAll,
    })
    if err != nil {
        logging.DefaultLogger.With("error", err).Error("Error adding {{.Kind}} watcher to controller")
        panic(err)
    }
    {{ end }}{{ end }}

    stopCh := make(chan struct{})

    // Signal channel
    sigCh := make(chan os.Signal, 1)
    signal.Notify(sigCh, syscall.SIGINT, syscall.SIGTERM)
    go func() {
        <- sigCh
        stopCh <- struct{}{}
    }()

    // Run
	logging.DefaultLogger.Info("Starting operator")
    err = runner.Run(stopCh)
    if err != nil {
        logging.DefaultLogger.With("error", err).Error("Operator exited with error")
		panic(err)
	}
    logging.DefaultLogger.Info("Normal operator exit")

}