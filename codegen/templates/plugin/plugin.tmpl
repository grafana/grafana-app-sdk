package plugin

import (
    "context"
	"net/http"

	"go.opentelemetry.io/otel"

	"{{.Repo}}/pkg/plugin/secure"
	"github.com/grafana/grafana-plugin-sdk-go/backend"
	"github.com/grafana/grafana-app-sdk/logging"
	"github.com/grafana/grafana-app-sdk/plugin/kubeconfig"
	"github.com/grafana/grafana-app-sdk/plugin/router"
)

type Service interface { {{ range .Resources }}
    Get{{ .Kind }}Service(context.Context) ({{.Kind}}Service, error){{end}}
}

// Plugin is the backend plugin
type Plugin struct {
	router      *router.JSONRouter
	namespace   string
	service     Service
}

// Start has the plugin's router start listening over gRPC, and blocks until an unrecoverable error occurs
func (p *Plugin) Start() error {
	return p.router.ListenAndServe()
}

// CallResource allows Plugin to implement grafana-plugin-sdk-go/backend/instancemgmt.Instance for an App plugin, 
// Which allows it to be used with grafana-plugin-sdk-go/backend/app.Manage. 
// CallResource downstreams all CallResource requests to the router's handler
func (p *Plugin) CallResource(ctx context.Context, req *backend.CallResourceRequest, sender backend.CallResourceResponseSender) error {
	return p.router.CallResource(ctx, req, sender)
}

func New(namespace string, service Service) (*Plugin, error) {
	p := &Plugin{
	    router: router.NewJSONRouter(),
			namespace: namespace,
	    service: service,
	}

	p.router.Use(
		router.NewTracingMiddleware(otel.GetTracerProvider().Tracer("tracing-middleware")),
		router.NewLoggingMiddleware(logging.DefaultLogger),
		kubeconfig.LoadingMiddleware(),
		router.MiddlewareFunc(secure.Middleware))

	// V1 Routes
	v1Subrouter := p.router.Subroute("v1/")
	{{ range .Resources }}
	// {{.Kind}} subrouter
	{{.MachineName}}Subrouter := v1Subrouter.Subroute("{{.PluralMachineName}}/")
	v1Subrouter.Handle("{{.PluralMachineName}}", p.handle{{.Kind}}List, http.MethodGet)
	v1Subrouter.HandleWithCode("{{.PluralMachineName}}", p.handle{{.Kind}}Create, http.StatusCreated, http.MethodPost)
	{{.MachineName}}Subrouter.Handle("{name}", p.handle{{.Kind}}Get, http.MethodGet)
	{{.MachineName}}Subrouter.Handle("{name}", p.handle{{.Kind}}Update, http.MethodPut)
	{{.MachineName}}Subrouter.HandleWithCode("{name}", p.handle{{.Kind}}Delete, http.StatusNoContent, http.MethodDelete)
	{{ end }}

	return p, nil
}

type errWithStatusCode interface {
	error
	StatusCode() int
}