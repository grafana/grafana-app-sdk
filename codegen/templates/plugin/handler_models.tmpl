package plugin

import (
	"context"
	"encoding/json"
	"io"
	"net/http"
	"strings"

	"github.com/grafana/grafana-app-sdk/plugin"
	"github.com/grafana/grafana-app-sdk/plugin/router"
	"github.com/grafana/grafana-app-sdk/resource"
	"github.com/grafana/grafana-plugin-sdk-go/backend/log"
	"github.com/grafana/grafana-plugin-sdk-go/backend/tracing"

	{{.MachineName}} "{{.Repo}}/{{.APICodegenPath}}/models/{{.MachineName}}/{{ .ToPackageName .Version }}"
)

type {{.Kind}}Service interface {
	List(ctx context.Context, namespace string, filters ...string) ([]{{.MachineName}}.{{.TypeName}}, error)
	Get(ctx context.Context, id resource.Identifier) (*{{.MachineName}}.{{.TypeName}}, error)
	Add(ctx context.Context, namespace string, obj *{{.MachineName}}.{{.TypeName}}) (*{{.MachineName}}.{{.TypeName}}, error)
	Update(ctx context.Context, id resource.Identifier, obj *{{.MachineName}}.{{.TypeName}}) (*{{.MachineName}}.{{.TypeName}}, error)
	Delete(ctx context.Context, id resource.Identifier) error
}

func (p *Plugin) handle{{.Kind}}List(ctx context.Context, req router.JSONRequest) (router.JSONResponse, error) {
	ctx, span := tracing.DefaultTracer().Start(ctx, "{{.MachineName}}-list")
	defer span.End()
	filtersRaw := req.URL.Query().Get("filters")
	filters := make([]string, 0)
	if len(filtersRaw) > 0 {
		filters = strings.Split(filtersRaw, ",")
	}
	svc, err := p.service.Get{{.Kind}}Service(ctx)
	if err != nil {
	    log.DefaultLogger.With("traceID", span.SpanContext().TraceID()).Error("Error getting {{.Kind}}Service: " + err.Error(), "error", err)
	    return nil, plugin.NewError(http.StatusInternalServerError, err.Error())
	}
	return svc.List(ctx, p.namespace, filters...)
}

func (p *Plugin) handle{{.Kind}}Get(ctx context.Context, req router.JSONRequest) (router.JSONResponse, error) {
	ctx, span := tracing.DefaultTracer().Start(ctx, "{{.MachineName}}-get")
	defer span.End()
    svc, err := p.service.Get{{.Kind}}Service(ctx)
    if err != nil {
	    log.DefaultLogger.With("traceID", span.SpanContext().TraceID()).Error("Error getting {{.Kind}}Service: " + err.Error(), "error", err)
        return nil, plugin.NewError(http.StatusInternalServerError, err.Error())
    }
	obj, err := svc.Get(ctx, resource.Identifier{
		Namespace: p.namespace,
		Name:      req.Vars.MustGet("name"),
	})
	if err != nil {
		if e, ok := err.(errWithStatusCode); ok {
			return nil, plugin.NewError(e.StatusCode(), e.Error())
		} else {
            log.DefaultLogger.With("traceID", span.SpanContext().TraceID()).Error("Error getting {{.Kind}} '" + req.Vars.MustGet("name") + "': " + err.Error(), "error", err)
        }
	}
	return obj, err
}

func (p *Plugin) handle{{.Kind}}Create(ctx context.Context, req router.JSONRequest) (router.JSONResponse, error) {
	ctx, span := tracing.DefaultTracer().Start(ctx, "{{.MachineName}}-create")
	defer span.End()
	body, err := io.ReadAll(req.Body)
	if err != nil {
		return nil, plugin.NewError(http.StatusBadRequest, err.Error())
	}

    unmarshaled{{.TypeName}} := &{{.MachineName}}.{{.TypeName}}{}
	err = json.Unmarshal(body, &unmarshaled{{.TypeName}})
	if err != nil {
		return nil, plugin.NewError(http.StatusBadRequest, err.Error())
	}

    svc, err := p.service.Get{{.Kind}}Service(ctx)
    if err != nil {
	    log.DefaultLogger.With("traceID", span.SpanContext().TraceID()).Error("Error getting {{.Kind}}Service: " + err.Error(), "error", err)
        return nil, plugin.NewError(http.StatusInternalServerError, err.Error())
    }
	obj, err := svc.Add(ctx, p.namespace, unmarshaled{{.TypeName}})
	if err != nil {
		if e, ok := err.(errWithStatusCode); ok {
			return nil, plugin.NewError(e.StatusCode(), e.Error())
		} else {
            log.DefaultLogger.With("traceID", span.SpanContext().TraceID()).Error("Error creating new {{.Kind}}: " + err.Error(), "error", err)
        }
	}
	return obj, err
}

func (p *Plugin) handle{{.Kind}}Update(ctx context.Context, req router.JSONRequest) (router.JSONResponse, error) {
	ctx, span := tracing.DefaultTracer().Start(ctx, "{{.MachineName}}-update")
	defer span.End()
	body, err := io.ReadAll(req.Body)
	if err != nil {
		return nil, plugin.NewError(http.StatusBadRequest, err.Error())
	}

	unmarshaled{{.TypeName}} := &{{.MachineName}}.{{.TypeName}}{}
	err = json.Unmarshal(body, &unmarshaled{{.TypeName}})
	if err != nil {
		return nil, plugin.NewError(http.StatusBadRequest, err.Error())
	}

    svc, err := p.service.Get{{.Kind}}Service(ctx)
    if err != nil {
	    log.DefaultLogger.With("traceID", span.SpanContext().TraceID()).Error("Error getting {{.Kind}}Service: " + err.Error(), "error", err)
        return nil, plugin.NewError(http.StatusInternalServerError, err.Error())
    }
	obj, err := svc.Update(ctx, resource.Identifier{
		Namespace: p.namespace,
		Name:      req.Vars.MustGet("name"),
	}, unmarshaled{{.TypeName}})
	if err != nil {
		if e, ok := err.(errWithStatusCode); ok {
			return nil, plugin.NewError(e.StatusCode(), e.Error())
		} else {
            log.DefaultLogger.With("traceID", span.SpanContext().TraceID()).Error("Error updating {{.Kind}} '" + req.Vars.MustGet("name") + "': " + err.Error(), "error", err)
        }
	}
	return obj, err
}

func (p *Plugin) handle{{.Kind}}Delete(ctx context.Context, req router.JSONRequest) (router.JSONResponse, error) {
	ctx, span := tracing.DefaultTracer().Start(ctx, "{{.MachineName}}-delete")
	defer span.End()
    svc, err := p.service.Get{{.Kind}}Service(ctx)
    if err != nil {
	    log.DefaultLogger.With("traceID", span.SpanContext().TraceID()).Error("Error getting {{.Kind}}Service: " + err.Error(), "error", err)
        return nil, plugin.NewError(http.StatusInternalServerError, err.Error())
    }
	err = svc.Delete(ctx, resource.Identifier{
		Namespace: p.namespace,
		Name:      req.Vars.MustGet("name"),
	})
	if err != nil {
		if e, ok := err.(errWithStatusCode); ok {
			return nil, plugin.NewError(e.StatusCode(), e.Error())
		} else {
	        log.DefaultLogger.With("traceID", span.SpanContext().TraceID()).Error("Error deleting {{.Kind}} '" + req.Vars.MustGet("name") + "': " + err.Error(), "error", err)
	    }
	}
	return nil, err
}
