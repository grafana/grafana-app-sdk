// Code generated - EDITING IS FUTILE. DO NOT EDIT.

package v1_0

import (
	time "time"
)

// +k8s:openapi-gen=true
type InnerObject2 struct {
	Name    string                 `json:"name"`
	Details map[string]interface{} `json:"details"`
}

// NewInnerObject2 creates a new InnerObject2 object.
func NewInnerObject2() *InnerObject2 {
	return &InnerObject2{}
}

// +k8s:openapi-gen=true
type InnerObject1 struct {
	InnerField1 string         `json:"innerField1"`
	InnerField2 []string       `json:"innerField2"`
	InnerField3 []InnerObject2 `json:"innerField3"`
}

// NewInnerObject1 creates a new InnerObject1 object.
func NewInnerObject1() *InnerObject1 {
	return &InnerObject1{}
}

// +k8s:openapi-gen=true
type Type1 struct {
	Group   string   `json:"group"`
	Options []string `json:"options,omitempty"`
}

// NewType1 creates a new Type1 object.
func NewType1() *Type1 {
	return &Type1{}
}

// +k8s:openapi-gen=true
type Type2 struct {
	Group   string                 `json:"group"`
	Details map[string]interface{} `json:"details"`
}

// NewType2 creates a new Type2 object.
func NewType2() *Type2 {
	return &Type2{}
}

// +k8s:openapi-gen=true
type UnionType interface{}

// +k8s:openapi-gen=true
type Spec struct {
	Field1     string           `json:"field1"`
	Inner      InnerObject1     `json:"inner"`
	Union      UnionType        `json:"union"`
	Map        map[string]Type2 `json:"map"`
	Timestamp  time.Time        `json:"timestamp"`
	Enum       SpecEnum         `json:"enum"`
	I32        int32            `json:"i32"`
	I64        int64            `json:"i64"`
	BoolField  bool             `json:"boolField"`
	FloatField float64          `json:"floatField"`
}

// NewSpec creates a new Spec object.
func NewSpec() *Spec {
	return &Spec{
		Inner:     *NewInnerObject1(),
		BoolField: false,
	}
}

// +k8s:openapi-gen=true
type SpecEnum string

const (
	SpecEnumVal1    SpecEnum = "val1"
	SpecEnumVal2    SpecEnum = "val2"
	SpecEnumVal3    SpecEnum = "val3"
	SpecEnumVal4    SpecEnum = "val4"
	SpecEnumDefault SpecEnum = "default"
)
