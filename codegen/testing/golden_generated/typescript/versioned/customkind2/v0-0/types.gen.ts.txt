export interface InnerObject1 {
  innerField1: string;
  innerField2: string[];
  innerField3: Array<InnerObject2>;
}

export const defaultInnerObject1: Partial<InnerObject1> = {
  innerField2: [],
  innerField3: [],
};

export interface InnerObject2 {
  details: Record<string, unknown>;
  name: string;
}

export interface Type1 {
  group: string;
  options?: string[];
}

export const defaultType1: Partial<Type1> = {
  options: [],
};

export interface Type2 {
  details: Record<string, unknown>;
  group: string;
}

export type UnionType = (Type1 | Type2);

export enum enum {
  Default = 'default',
  Val1 = 'val1',
  Val2 = 'val2',
  Val3 = 'val3',
  Val4 = 'val4',
}

export const defaultenum: enum = enum.Default;

export interface CustomKind2 {
  boolField: boolean;
  enum: ('val1' | 'val2' | 'val3' | 'val4' | 'default');
  field1: string;
  floatField: number;
  i32: number;
  i64: number;
  inner: InnerObject1;
  map: Record<string, Type2>;
  timestamp: string;
  union: UnionType;
}

export const defaultCustomKind2: Partial<CustomKind2> = {
  boolField: false,
  enum: 'default',
};
