//
// This file is generated by grafana-app-sdk
// DO NOT EDIT
//

package groupbygroup

import (
	"encoding/json"

	"github.com/grafana/grafana-app-sdk/app"
	"k8s.io/kube-openapi/pkg/spec3"
	"k8s.io/kube-openapi/pkg/validation/spec"
)

var (
	rawSchemaTestKindv1      = []byte(`{"spec":{"properties":{"stringField":{"type":"string"}},"required":["stringField"],"type":"object"},"status":{"properties":{"additionalFields":{"description":"additionalFields is reserved for future use","type":"object","x-kubernetes-preserve-unknown-fields":true},"operatorStates":{"additionalProperties":{"properties":{"descriptiveState":{"description":"descriptiveState is an optional more descriptive state field which has no requirements on format","type":"string"},"details":{"description":"details contains any extra information that is operator-specific","type":"object","x-kubernetes-preserve-unknown-fields":true},"lastEvaluation":{"description":"lastEvaluation is the ResourceVersion last evaluated","type":"string"},"state":{"description":"state describes the state of the lastEvaluation.\nIt is limited to three possible states for machine evaluation.","enum":["success","in_progress","failed"],"type":"string"}},"required":["lastEvaluation","state"],"type":"object"},"description":"operatorStates is a map of operator ID to operator state evaluations.\nAny operator which consumes this kind SHOULD add its state evaluation information to this field.","type":"object"}},"type":"object"}}`)
	versionSchemaTestKindv1  app.VersionSchema
	_                        = json.Unmarshal(rawSchemaTestKindv1, &versionSchemaTestKindv1)
	rawSchemaTestKindv2      = []byte(`{"spec":{"properties":{"intField":{"format":"int64","type":"integer"},"stringField":{"type":"string"},"timeField":{"format":"date-time","type":"string"}},"required":["stringField","intField","timeField"],"type":"object"},"status":{"properties":{"additionalFields":{"description":"additionalFields is reserved for future use","type":"object","x-kubernetes-preserve-unknown-fields":true},"operatorStates":{"additionalProperties":{"properties":{"descriptiveState":{"description":"descriptiveState is an optional more descriptive state field which has no requirements on format","type":"string"},"details":{"description":"details contains any extra information that is operator-specific","type":"object","x-kubernetes-preserve-unknown-fields":true},"lastEvaluation":{"description":"lastEvaluation is the ResourceVersion last evaluated","type":"string"},"state":{"description":"state describes the state of the lastEvaluation.\nIt is limited to three possible states for machine evaluation.","enum":["success","in_progress","failed"],"type":"string"}},"required":["lastEvaluation","state"],"type":"object"},"description":"operatorStates is a map of operator ID to operator state evaluations.\nAny operator which consumes this kind SHOULD add its state evaluation information to this field.","type":"object"}},"type":"object"}}`)
	versionSchemaTestKindv2  app.VersionSchema
	_                        = json.Unmarshal(rawSchemaTestKindv2, &versionSchemaTestKindv2)
	rawSchemaTestKindv3      = []byte(`{"spec":{"properties":{"boolField":{"type":"boolean"},"intField":{"format":"int64","type":"integer"},"stringField":{"type":"string"},"timeField":{"format":"date-time","type":"string"}},"required":["stringField","intField","timeField","boolField"],"type":"object"},"status":{"properties":{"additionalFields":{"description":"additionalFields is reserved for future use","type":"object","x-kubernetes-preserve-unknown-fields":true},"operatorStates":{"additionalProperties":{"properties":{"descriptiveState":{"description":"descriptiveState is an optional more descriptive state field which has no requirements on format","type":"string"},"details":{"description":"details contains any extra information that is operator-specific","type":"object","x-kubernetes-preserve-unknown-fields":true},"lastEvaluation":{"description":"lastEvaluation is the ResourceVersion last evaluated","type":"string"},"state":{"description":"state describes the state of the lastEvaluation.\nIt is limited to three possible states for machine evaluation.","enum":["success","in_progress","failed"],"type":"string"}},"required":["lastEvaluation","state"],"type":"object"},"description":"operatorStates is a map of operator ID to operator state evaluations.\nAny operator which consumes this kind SHOULD add its state evaluation information to this field.","type":"object"}},"type":"object"}}`)
	versionSchemaTestKindv3  app.VersionSchema
	_                        = json.Unmarshal(rawSchemaTestKindv3, &versionSchemaTestKindv3)
	rawSchemaTestKind2v1     = []byte(`{"spec":{"properties":{"testField":{"type":"string"}},"required":["testField"],"type":"object"},"status":{"properties":{"additionalFields":{"description":"additionalFields is reserved for future use","type":"object","x-kubernetes-preserve-unknown-fields":true},"operatorStates":{"additionalProperties":{"properties":{"descriptiveState":{"description":"descriptiveState is an optional more descriptive state field which has no requirements on format","type":"string"},"details":{"description":"details contains any extra information that is operator-specific","type":"object","x-kubernetes-preserve-unknown-fields":true},"lastEvaluation":{"description":"lastEvaluation is the ResourceVersion last evaluated","type":"string"},"state":{"description":"state describes the state of the lastEvaluation.\nIt is limited to three possible states for machine evaluation.","enum":["success","in_progress","failed"],"type":"string"}},"required":["lastEvaluation","state"],"type":"object"},"description":"operatorStates is a map of operator ID to operator state evaluations.\nAny operator which consumes this kind SHOULD add its state evaluation information to this field.","type":"object"}},"type":"object"}}`)
	versionSchemaTestKind2v1 app.VersionSchema
	_                        = json.Unmarshal(rawSchemaTestKind2v1, &versionSchemaTestKind2v1)
)

var appManifestData = app.ManifestData{
	AppName: "test-app",
	Group:   "testapp.ext.grafana.com",
	Kinds: []app.ManifestKind{
		{
			Kind:       "TestKind",
			Scope:      "Namespaced",
			Conversion: true,
			Versions: []app.ManifestKindVersion{
				{
					Name: "v1",
					Admission: &app.AdmissionCapabilities{
						Validation: &app.ValidationCapability{
							Operations: []app.AdmissionOperation{
								app.AdmissionOperationCreate,
								app.AdmissionOperationUpdate,
							},
						},
					},
					Schema: &versionSchemaTestKindv1,
				},

				{
					Name: "v2",
					Admission: &app.AdmissionCapabilities{
						Validation: &app.ValidationCapability{
							Operations: []app.AdmissionOperation{
								app.AdmissionOperationCreate,
								app.AdmissionOperationUpdate,
							},
						},
						Mutation: &app.MutationCapability{
							Operations: []app.AdmissionOperation{
								app.AdmissionOperationCreate,
								app.AdmissionOperationUpdate,
							},
						},
					},
					Schema: &versionSchemaTestKindv2,
				},

				{
					Name: "v3",
					Admission: &app.AdmissionCapabilities{
						Validation: &app.ValidationCapability{
							Operations: []app.AdmissionOperation{
								app.AdmissionOperationCreate,
								app.AdmissionOperationUpdate,
							},
						},
						Mutation: &app.MutationCapability{
							Operations: []app.AdmissionOperation{
								app.AdmissionOperationCreate,
								app.AdmissionOperationUpdate,
							},
						},
					},
					Schema: &versionSchemaTestKindv3,
					CustomRoutes: map[string]spec3.PathProps{
						"/reconcile": {
							Post: &spec3.Operation{
								OperationProps: spec3.OperationProps{

									RequestBody: &spec3.RequestBody{
										RequestBodyProps: spec3.RequestBodyProps{

											Required: true,
											Content: map[string]*spec3.MediaType{
												"application/json": {
													MediaTypeProps: spec3.MediaTypeProps{
														Schema: &spec.Schema{
															SchemaProps: spec.SchemaProps{
																Type: []string{"object"},
																Properties: map[string]spec.Schema{
																	"force": {
																		SchemaProps: spec.SchemaProps{
																			Type: []string{"boolean"},
																		},
																	},
																	"reason": {
																		SchemaProps: spec.SchemaProps{
																			Type: []string{"string"},
																		},
																	},
																},
																Required: []string{
																	"force",
																},
															}},
													}},
											},
										}},
									Responses: &spec3.Responses{
										ResponsesProps: spec3.ResponsesProps{
											Default: &spec3.Response{
												ResponseProps: spec3.ResponseProps{
													Description: "Default OK response",
													Content: map[string]*spec3.MediaType{
														"application/json": {
															MediaTypeProps: spec3.MediaTypeProps{
																Schema: &spec.Schema{
																	SchemaProps: spec.SchemaProps{
																		Type: []string{"object"},
																		Properties: map[string]spec.Schema{
																			"message": {
																				SchemaProps: spec.SchemaProps{
																					Type: []string{"string"},
																				},
																			},
																			"status": {
																				SchemaProps: spec.SchemaProps{
																					Type: []string{"string"},
																					Enum: []interface{}{
																						"success",
																						"failure",
																					},
																				},
																			},
																		},
																		Required: []string{
																			"status",
																			"message",
																		},
																	}},
															}},
													},
												},
											},
										}},
								},
							},
						},
						"/search": {
							Get: &spec3.Operation{
								OperationProps: spec3.OperationProps{

									Parameters: []*spec3.Parameter{

										{
											Name: "limit",
											In:   "query",
											Schema: &spec.Schema{
												SchemaProps: spec.SchemaProps{
													Type: []string{"integer"},
												},
											},
										},

										{
											Name: "offset",
											In:   "query",
											Schema: &spec.Schema{
												SchemaProps: spec.SchemaProps{
													Type: []string{"integer"},
												},
											},
										},

										{
											Name:     "q",
											In:       "query",
											Required: true,
											Schema: &spec.Schema{
												SchemaProps: spec.SchemaProps{
													Type: []string{"string"},
												},
											},
										},
									},

									Responses: &spec3.Responses{
										ResponsesProps: spec3.ResponsesProps{
											Default: &spec3.Response{
												ResponseProps: spec3.ResponseProps{
													Description: "Default OK response",
													Content: map[string]*spec3.MediaType{
														"application/json": {
															MediaTypeProps: spec3.MediaTypeProps{
																Schema: &spec.Schema{
																	SchemaProps: spec.SchemaProps{
																		Type: []string{"object"},
																		Properties: map[string]spec.Schema{
																			"items": {
																				SchemaProps: spec.SchemaProps{
																					Type: []string{"array"},
																				},
																			},
																			"total": {
																				SchemaProps: spec.SchemaProps{
																					Type: []string{"integer"},
																				},
																			},
																		},
																		Required: []string{
																			"items",
																			"total",
																		},
																	}},
															}},
													},
												},
											},
										}},
								},
							},
						},
					},
				},
			},
		},

		{
			Kind:       "TestKind2",
			Scope:      "Namespaced",
			Conversion: false,
			Versions: []app.ManifestKindVersion{
				{
					Name:   "v1",
					Schema: &versionSchemaTestKind2v1,
				},
			},
		},
	},
	Operator: &app.ManifestOperatorInfo{
		URL: "https://foo.bar:8443",
		Webhooks: &app.ManifestOperatorWebhookProperties{
			ConversionPath: "/convert",
			ValidationPath: "/validate",
			MutationPath:   "/mutate",
		},
	},
}

func LocalManifest() app.Manifest {
	return app.NewEmbeddedManifest(appManifestData)
}

func RemoteManifest() app.Manifest {
	return app.NewAPIServerManifest("test-app")
}
