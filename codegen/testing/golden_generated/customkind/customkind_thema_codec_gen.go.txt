//
// Code generated by grafana-app-sdk. DO NOT EDIT.
//

package customkind

import (
	"encoding/json"
	"fmt"
	"io"
	"time"

	"github.com/grafana/grafana-app-sdk/resource"
)

// JSONCodec is an implementation of resource.Codec for kubernetes JSON encoding using thema
type JSONCodec struct{}

// Read reads JSON-encoded bytes from `reader` and unmarshals them into `into`
func (*JSONCodec) Read(reader io.Reader, into resource.Object) error {
	cast, ok := into.(*CustomKind)
	if !ok {
		return fmt.Errorf("can only read into type *customkind.CustomKind")
	}

	temp := &resource.TypedSpecStatusObject[json.RawMessage, json.RawMessage]{}
	err := json.NewDecoder(reader).Decode(temp)
	if err != nil {
		return err
	}
	// Re-encode metadata
	annotations := temp.GetAnnotations()
	if annotations == nil {
		annotations = make(map[string]string)
	}
	md := Metadata{
		Finalizers:        temp.GetFinalizers(),
		Generation:        temp.GetGeneration(),
		Labels:            temp.GetLabels(),
		ResourceVersion:   temp.GetResourceVersion(),
		Uid:               string(temp.GetUID()),
		CreationTimestamp: temp.GetCreationTimestamp().Time,
		UpdateTimestamp:   extractUpdateTimestamp(annotations),
		CreatedBy:         extractCreatedBy(annotations),
		UpdatedBy:         extractUpdatedBy(annotations),
	}
	// Thema hates null fields for these ones
	if md.Finalizers == nil {
		md.Finalizers = []string{}
	}
	if md.Labels == nil {
		md.Labels = map[string]string{}
	}
	metadataBytes, err := json.Marshal(md)
	if err != nil {
		return err
	}
	if len(temp.Status) == 0 {
		temp.Status, err = json.Marshal(Status{})
		if err != nil {
			return err
		}
	}
	err = ThemaUnmarshalFunc(cast, ThemaObjectBytes{
		Metadata: metadataBytes,
		Spec:     temp.Spec,
		Subresources: map[string][]byte{
			"status": temp.Status,
		},
	})
	if err != nil {
		return err
	}
	// Overwrite the metadata in the unmarshaled object with the one from temp (to get accurate kube metadata)
	cast.ObjectMeta = temp.ObjectMeta
	cast.APIVersion = temp.APIVersion
	cast.Kind = temp.Kind
	return nil
}

// Write writes JSON-encoded bytes into `writer` marshaled from `from`
func (*JSONCodec) Write(writer io.Writer, from resource.Object) error {
	// Object is already ready to be encoded as kubernetes JSON, no special behavior for write
	return json.NewEncoder(writer).Encode(from)
}

func extractCreatedBy(annotations map[string]string) string {

	return annotations["createdBy"]
}
func extractCustomMetadataField(annotations map[string]string) string {

	return annotations["customMetadataField"]
}
func extractOtherMetadataField(annotations map[string]string) string {

	return annotations["otherMetadataField"]
}
func extractUpdateTimestamp(annotations map[string]string) time.Time {

	parsed, _ := time.Parse(annotations["updateTimestamp"], time.RFC3339)
	return parsed
}
func extractUpdatedBy(annotations map[string]string) string {

	return annotations["updatedBy"]
}

// Interface compliance checks
var _ resource.Codec = &JSONCodec{}
