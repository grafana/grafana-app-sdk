//
// Code generated by grafana-app-sdk. DO NOT EDIT.
//

package customkind

import (
	"encoding/json"

	"github.com/grafana/grafana-app-sdk/resource"
)

// ObjectUnmarshalFunc is used to override the default Object.Unmarshal behavior, if desired.
var ObjectUnmarshalFunc func(into *Object, objBytes resource.ObjectBytes, config resource.UnmarshalConfig) error

// Object is a resource.Object-implementing wrapper for CustomKind.
// It contains static and object metadata, as well as the CustomKind struct itself.
type Object struct {
	// StaticMeta contains the static metadata (name, namespace, group, version, kind) that uniquely identifies this resource
	// it is distinct from the Metadata field, which contains all other metadata for the object.
	// StaticMeta should not be mutated on an existing object (as this will then cause it to indicate a new object instead).
	// TODO: this may end up merged with Metadata in the future
	StaticMeta resource.StaticMetadata `json:"staticMetadata"`
	// Metadata contains all the common and kind-specific metadata for the object.
	Metadata Metadata `json:"metadata"`
	// Spec contains the spec contents for the object
	Spec   Spec   `json:"spec"`
	Status Status `json:"status"`
}

// CommonMetadata returns the resource.CommonMetadata associated with this Object.
// The CommonMetadata can be overwritten with a SetCommonMetadata call,
// or individual parts changed directly from the Metadata field.
func (o *Object) CommonMetadata() resource.CommonMetadata {
	return resource.CommonMetadata{
		UID:               o.Metadata.Uid,
		ResourceVersion:   o.Metadata.ResourceVersion,
		Generation:        o.Metadata.Generation,
		Labels:            o.Metadata.Labels,
		CreationTimestamp: o.Metadata.CreationTimestamp,
		UpdateTimestamp:   o.Metadata.UpdateTimestamp,
		DeletionTimestamp: o.Metadata.DeletionTimestamp,
		CreatedBy:         o.Metadata.CreatedBy,
		UpdatedBy:         o.Metadata.UpdatedBy,
		Finalizers:        o.Metadata.Finalizers,
		ExtraFields:       o.Metadata.ExtraFields,
	}
}

// SetCommonMetadata overwrites the resource.CommonMetadata associated with this Object
// with the provided CommonMetadata.
// In practice, this overwrites the Metadata fields that correlate to the CommonMetadata fields with the new values provided.
func (o *Object) SetCommonMetadata(metadata resource.CommonMetadata) {
	o.Metadata.Uid = metadata.UID
	o.Metadata.ResourceVersion = metadata.ResourceVersion
	o.Metadata.Generation = metadata.Generation
	o.Metadata.Labels = metadata.Labels
	o.Metadata.CreationTimestamp = metadata.CreationTimestamp
	o.Metadata.UpdateTimestamp = metadata.UpdateTimestamp
	o.Metadata.DeletionTimestamp = metadata.DeletionTimestamp
	o.Metadata.CreatedBy = metadata.CreatedBy
	o.Metadata.UpdatedBy = metadata.UpdatedBy
	o.Metadata.Finalizers = metadata.Finalizers
	o.Metadata.ExtraFields = metadata.ExtraFields
}

// StaticMetadata returns the resource.StaticMetadata associated with this Object.
// The StaticMetadata can be overwritten with a SetStaticMetadata call,
// or individual parts changed directly from the StaticMeta field.
func (o *Object) StaticMetadata() resource.StaticMetadata {
	return o.StaticMeta
}

// SetStaticMetadata overwrites the resource.StaticMetadata associated with this Object
// with the provided StaticMetadata.
func (o *Object) SetStaticMetadata(metadata resource.StaticMetadata) {
	o.StaticMeta = metadata
}

func (o *Object) CustomMetadata() resource.CustomMetadata {
	return resource.SimpleCustomMetadata{
		"customMetadataField": o.Metadata.CustomMetadataField,
		"otherMetadataField":  o.Metadata.OtherMetadataField,
	}
}

// SpecObject returns the actual "schema" CustomKind object, which holds the main body of data.
func (o *Object) SpecObject() any {
	return o.Spec
}

// Subresources returns a map of subresource name(s) to the object value for that subresource.
func (o *Object) Subresources() map[string]any {
	return map[string]any{
		"status": o.Status,
	}
}

// Copy returns a full copy of the Object with all its data
func (o *Object) Copy() resource.Object {
	return resource.CopyObject(o)
}

// Unmarshal uses an internal bound Lineage to unmarshal the spec object and all provided subresources.
// After unmarshaling, they will be available via the SpecObject() and Subresources() calls.
// If the spec or any subresources cannot be unmarshaled, it will return an error.
func (o *Object) Unmarshal(objBytes resource.ObjectBytes, config resource.UnmarshalConfig) error {
	if ObjectUnmarshalFunc != nil {
		return ObjectUnmarshalFunc(o, objBytes, config)
	}

	// Attempt raw JSON unmarshal for each subresource
	err := json.Unmarshal(objBytes.Spec, &o.Spec)
	if err != nil {
		return err
	}
	err = json.Unmarshal(objBytes.Metadata, &o.Metadata)
	if err != nil {
		return err
	}
	if sr, ok := objBytes.Subresources["status"]; ok {
		err = json.Unmarshal(sr, &o.Status)
		if err != nil {
			return err
		}
	}
	return nil
}
